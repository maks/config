export APPS=$HOME/apps
export JAVA_HOME=$APPS/android-studio/jre
export ANDROID_PATH=$HOME/Android
export NODE_HOME=$APPS/node
export DART_PATH=/opt/apps/dart-sdk
## For Dart pub installed exe's:
export PUB_CACHE_PATH="$HOME/.pub-cache/bin"
export RUST_BINS_PATH=$HOME/.cargo/bin
export PATH=$HOME/bin:$JAVA_HOME/bin:$PATH:$ANDROID_PATH/platform-tools:$ANDROID_PATH/tools:$NODE_HOME/bin:$DART_PATH/bin:$FLUTTER/bin:$FLUTTER_DEVTOOLS:$RUST_BINS_PATH:$PUB_CACHE_PATH
. $HOME/config/adb.bash_complete


export DENO_INSTALL="/home/maks/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

export EDITOR=vim

. $HOME/config/bash_aliases

#disable capslock - to renable use: setxkbmap -option
#setxkbmap -option ctrl:nocaps

#stop silly missing packages command from running
unset command_not_found_handle

function latest() { def=5; LINES=${2:-$def}; ls -ths $1 |head -n $LINES ;}

# http://henrik.nyh.se/2008/12/git-dirty-prompt
# http://www.simplisticcomplexity.com/2008/03/13/show-your-git-branch-name-in-your-prompt/
#   username@Machine ~/dev/dir[master]$   # clean working directory
#   username@Machine ~/dev/dir[master*]$  # dirty working directory

function _git_prompt() {
    local git_status="`git status -unormal 2>&1`"
    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local ansi=42
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
            local ansi=43
        else
            local ansi=44
        fi
        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
            test "$branch" != master || branch=' '
        else
            # Detached HEAD.  (branch=HEAD is a faster alternative.)
            branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
                echo HEAD`)"
        fi
        echo -n '\[\e[0;37;'"$ansi"';1m\]'"$branch"'\[\e[0m\] '
    fi
}
function _prompt_command() {
    PS1="`_git_prompt`"' \[\e[1;34m\]\w \$\[\e[0m\] '
}
PROMPT_COMMAND=_prompt_command

# Open a man page in vim
vman () {
  MANWIDTH=150 MANPAGER='col -bx' man $@ | vim -R -c "set ft=man" -
}

# For AOSP building
export USE_CCACHE=1

# need to do this for git gnome-keyring helper, nromamly only for ssh sessions, but for some reason not working in desktop 16.04 either...
# if [[ -z $DBUS_SESSION_BUS_ADDRESS ]]; then
#     if [[ -f ~/.dbus/session-bus/$(dbus-uuidgen --get)-0 ]]; then
#         source ~/.dbus/session-bus/$(dbus-uuidgen --get)-0
#         export DBUS_SESSION_BUS_ADDRESS
#     fi
# fi

#====
# bookmarking, ref: https://jeroenjanssens.com/navigate/
export MARKPATH=$HOME/.marks
function jump { 
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark { 
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark { 
    rm -i "$MARKPATH/$1"
}
function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}

_completemarks() {
  local curw=${COMP_WORDS[COMP_CWORD]}
  local wordlist=$(find $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
  return 0
}

complete -F _completemarks jump unmark
#====



export PICO_SDK_PATH=/home/maks/work/music/picoTracker/sources/Externals/pico-sdk
export PICO_EXTRAS_PATH=/home/maks/work/music/pico-extras
